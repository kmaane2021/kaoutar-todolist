{"version":3,"sources":["firebase.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","TodoApp","useState","task","setTask","tasklist","setTaskList","idOfUpdate","setIdOfUpdate","truth","setTruth","useEffect","populate","markCompleteGlobal","data","firestore","collection","get","then","querySnapshot","forEach","doc","newData","indexOf","id","arr","update","completed","className","type","name","onChange","e","target","value","handleChange","placeholder","onClick","datas","set","map","preventDefault","setTimeout","taskCompleted","delete","console","log","catch","error","res","filter","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.068552ce.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport \"@firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCYJ0omOR75kzRG_p-LrvsVyWVoONSwrEY\",\r\n    authDomain: \"kaoutarreactapp.firebaseapp.com\",\r\n    projectId: \"kaoutarreactapp\",\r\n    storageBucket: \"kaoutarreactapp.appspot.com\",\r\n    messagingSenderId: \"940830143408\",\r\n    appId: \"1:940830143408:web:6a6151341d3fa169761c75\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase ;","\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./todoapp.css\";\r\n\r\nimport firebase from \"../firebase\";\r\n\r\n\r\n\r\nfunction TodoApp() {\r\n\r\n  const [task, setTask] = useState(\"\");\r\n\r\n  const [tasklist, setTaskList] = useState([]);\r\n\r\n  const [idOfUpdate, setIdOfUpdate] = useState(null);\r\n\r\n  const [truth, setTruth] = useState();\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n\r\n    setTask(e.target.value);\r\n\r\n  };\r\n\r\n\r\n\r\n useEffect(() => {\r\n\r\n  populate();\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    let id = idOfUpdate;\r\n\r\n    if (id !== null) {\r\n\r\n      markCompleteGlobal();\r\n\r\n    }\r\n\r\n  }, [truth]);\r\n\r\n\r\n\r\n ///////////////////////////////////////\r\n\r\n\r\n\r\n  const AddTask = () => {\r\n\r\n    const datas = {\r\n\r\n      id: firebase\r\n\r\n        .firestore()\r\n\r\n        .collection(\"tasks\")\r\n\r\n        .doc().id,\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const db = firebase.firestore();\r\n\r\n    db.collection(\"tasks\")\r\n\r\n      .doc(datas.id)\r\n\r\n      .set({ task: task, completed: false, id: datas.id,value: task })\r\n\r\n      .then(() => {\r\n\r\n        populate();\r\n\r\n      })\r\n\r\n  };\r\n\r\n\r\n\r\n  const populate = (data) => {\r\n\r\n    setTaskList([]);\r\n\r\n    return firebase\r\n\r\n      .firestore()\r\n\r\n      .collection(\"tasks\")\r\n\r\n      .get()\r\n\r\n      .then(function(querySnapshot) {\r\n\r\n        querySnapshot.forEach(function(doc) {\r\n\r\n          let newData = doc.data();\r\n\r\n\r\n\r\n          if (tasklist.indexOf(newData.id) === -1) {\r\n\r\n            setTaskList((arr) => {\r\n\r\n              return [...arr, newData];\r\n\r\n            });\r\n\r\n          } \r\n\r\n        });\r\n\r\n      })\r\n\r\n  };\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n  \r\n\r\n   const taskCompleted = (e,id) => {\r\n\r\n    e.preventDefault();\r\n\r\n\r\n\r\n    debugger\r\n\r\n  setIdOfUpdate(id);\r\n\r\n    setTaskList(\r\n\r\n      tasklist.map((task) => {\r\n\r\n        if (task.id === id) {\r\n\r\n          task.completed = !task.completed;\r\n\r\n  \r\n\r\n          setTimeout(function() {\r\n\r\n            setTruth(task.completed);\r\n\r\n          }, 1000);\r\n\r\n        }\r\n\r\n        return task;\r\n\r\n      }))\r\n\r\n    \r\n\r\n  };\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n  const markCompleteGlobal = () => {\r\n\r\n  let id = idOfUpdate;\r\n\r\n  const itemtoupdate = firebase\r\n\r\n    .firestore()\r\n\r\n    .collection(\"tasks\")\r\n\r\n    .doc(id)\r\n\r\n\r\n\r\n  itemtoupdate.update({\r\n\r\n  completed: truth,\r\n\r\n  })\r\n\r\n\r\n\r\n  setIdOfUpdate(null);\r\n\r\n  setTruth(null);\r\n\r\n};\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n\r\nconst deletetask = (e,id) => {\r\n\r\n  e.preventDefault();\r\n\r\n  const db = firebase.firestore();\r\n\r\n  db.collection(\"tasks\")\r\n\r\n    .doc(id)\r\n\r\n    .delete()\r\n\r\n    .then(() => {\r\n\r\n      console.log(\"Document successfully deleted!\", id);\r\n\r\n    })\r\n\r\n    .catch((error) => {\r\n\r\n      console.error(id, \"Error removing document: \", error);\r\n\r\n    })\r\n\r\n    .then((res) => setTaskList([...tasklist.filter((task) => task.id !== id)]));\r\n\r\n  console.log(id, \"here is an id\", id);\r\n\r\n};\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"todo\">\r\n\r\n      <input\r\n\r\n        type=\"text\"\r\n\r\n        name=\"text\"\r\n\r\n        id=\"text\"\r\n\r\n        onChange={(e) => handleChange(e)}\r\n\r\n        placeholder=\"Add task here...\"\r\n\r\n      />\r\n\r\n      <button className=\"add-btn\" onClick={AddTask}>\r\n\r\n        Add\r\n\r\n      </button>\r\n\r\n      <br />\r\n\r\n      {tasklist !== [] ? (\r\n\r\n        <ul>\r\n\r\n          {tasklist.map((task) => (\r\n\r\n            <li className={task.completed ? \"crossText\" : \"listitem\"}>\r\n\r\n              {task.value}\r\n\r\n              <button\r\n\r\n                className=\"completed\"\r\n\r\n                onClick={(e) => taskCompleted(e, task.id)}\r\n\r\n              >\r\n\r\n                Completed\r\n\r\n              </button>\r\n\r\n\r\n\r\n              <button className=\"delete\" onClick={(e) => deletetask(e, task.id)}>\r\n\r\n                Delete\r\n\r\n              </button>\r\n\r\n            </li>\r\n\r\n          ))}\r\n\r\n        </ul>\r\n\r\n      ) : null}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\nexport default TodoApp;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoApp from \"./components/TodoApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <span className=\"title\">Todo List</span> <br />\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}